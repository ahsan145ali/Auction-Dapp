{"ast":null,"code":"var _jsxFileName = \"D:\\\\BlockChain Projects\\\\Auction-DApp\\\\src\\\\Components\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport storage_contract from '../contracts/SimpleStorage.json';\nimport Navbar from \"./Navbar\";\n\nclass App extends Component {\n  async UNSAFE_componentWillMount() {\n    await this.LoadWeb3();\n    await this.LoadBLockChain();\n  }\n\n  async LoadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('No MetaMask or anyother connection Detected');\n    }\n  }\n\n  async LoadBLockChain() {\n    const web3 = window.web3;\n    const account = await web3.eth.getAccounts();\n    this.setState({\n      account: account[0]\n    });\n    console.log(account); //Ganache Network ID\n\n    const networkID = await web3.eth.net.getId(); //Load Contract\n\n    const ContractData = storage_contract.networks[networkID];\n\n    if (ContractData) {\n      const cont = new web3.eth.Contract(storage_contract.abi, ContractData.address);\n      this.setState({\n        storage_contract: cont\n      });\n      const val = await cont.methods.get().call();\n      console.log(\"Value:\", val);\n      const owner_addr = await cont.methods.GetOwner().call();\n      console.log(\"Onwer Address: \", owner_addr);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: '0x00001',\n      storage_contract: {}\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"TEST DAPP Account: \", this.state.account));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/BlockChain Projects/Auction-DApp/src/Components/App.js"],"names":["React","Component","Web3","storage_contract","Navbar","App","UNSAFE_componentWillMount","LoadWeb3","LoadBLockChain","window","ethereum","web3","enable","currentProvider","alert","account","eth","getAccounts","setState","console","log","networkID","net","getId","ContractData","networks","cont","Contract","abi","address","val","methods","get","call","owner_addr","GetOwner","constructor","props","state","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAGA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAE1B,QAAMK,yBAAN,GAAiC;AAC/B,UAAM,KAAKC,QAAL,EAAN;AACA,UAAM,KAAKC,cAAL,EAAN;AACD;;AAED,QAAMD,QAAN,GAAgB;AACd,QAAGE,MAAM,CAACC,QAAV,EACA;AACED,MAAAA,MAAM,CAACE,IAAP,GAAc,IAAIT,IAAJ,CAASO,MAAM,CAACC,QAAhB,CAAd;AACA,YAAMD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAAN;AACD,KAJD,MAKK,IAAGH,MAAM,CAACE,IAAV,EACL;AACEF,MAAAA,MAAM,CAACE,IAAP,GAAc,IAAIT,IAAJ,CAAUO,MAAM,CAACE,IAAP,CAAYE,eAAtB,CAAd;AACD,KAHI,MAID;AACFJ,MAAAA,MAAM,CAACK,KAAP,CAAa,6CAAb;AACD;AAEF;;AACD,QAAMN,cAAN,GAAsB;AACpB,UAAMG,IAAI,GAAGF,MAAM,CAACE,IAApB;AACA,UAAMI,OAAO,GAAG,MAAMJ,IAAI,CAACK,GAAL,CAASC,WAAT,EAAtB;AACA,SAAKC,QAAL,CAAc;AAACH,MAAAA,OAAO,EAACA,OAAO,CAAC,CAAD;AAAhB,KAAd;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ,EAJoB,CAMpB;;AACA,UAAMM,SAAS,GAAG,MAAMV,IAAI,CAACK,GAAL,CAASM,GAAT,CAAaC,KAAb,EAAxB,CAPoB,CASpB;;AACA,UAAMC,YAAY,GAAGrB,gBAAgB,CAACsB,QAAjB,CAA0BJ,SAA1B,CAArB;;AACA,QAAGG,YAAH,EAAgB;AACd,YAAME,IAAI,GAAG,IAAIf,IAAI,CAACK,GAAL,CAASW,QAAb,CAAsBxB,gBAAgB,CAACyB,GAAvC,EAA2CJ,YAAY,CAACK,OAAxD,CAAb;AACA,WAAKX,QAAL,CAAc;AAACf,QAAAA,gBAAgB,EAACuB;AAAlB,OAAd;AAGA,YAAMI,GAAG,GAAG,MAAMJ,IAAI,CAACK,OAAL,CAAaC,GAAb,GAAmBC,IAAnB,EAAlB;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAuBU,GAAvB;AACA,YAAMI,UAAU,GAAG,MAAMR,IAAI,CAACK,OAAL,CAAaI,QAAb,GAAwBF,IAAxB,EAAzB;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Bc,UAA/B;AACD;AAGF;;AACDE,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACE,SAAKC,KAAL,GAAW;AACTvB,MAAAA,OAAO,EAAC,SADC;AAETZ,MAAAA,gBAAgB,EAAC;AAFR,KAAX;AAKH;;AAEDoC,EAAAA,MAAM,GAAE;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAwB,KAAKD,KAAL,CAAWvB,OAAnC,CADF,CADF;AAKD;;AA7DyB;;AA+D5B,eAAeV,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport storage_contract from '../contracts/SimpleStorage.json'\nimport Navbar from \"./Navbar\";\n\n\nclass App extends Component {\n\n  async UNSAFE_componentWillMount(){\n    await this.LoadWeb3()\n    await this.LoadBLockChain()\n  }\n\n  async LoadWeb3(){\n    if(window.ethereum)\n    { \n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if(window.web3)\n    {\n      window.web3 = new Web3( window.web3.currentProvider)\n    }\n    else{\n      window.alert('No MetaMask or anyother connection Detected')\n    }\n\n  }\n  async LoadBLockChain(){\n    const web3 = window.web3\n    const account = await web3.eth.getAccounts()\n    this.setState({account:account[0]})\n    console.log(account)\n\n    //Ganache Network ID\n    const networkID = await web3.eth.net.getId()\n\n    //Load Contract\n    const ContractData = storage_contract.networks[networkID]\n    if(ContractData){\n      const cont = new web3.eth.Contract(storage_contract.abi,ContractData.address)\n      this.setState({storage_contract:cont})  \n\n      \n      const val = await cont.methods.get().call()\n      console.log(\"Value:\" , val)\n      const owner_addr = await cont.methods.GetOwner().call()\n      console.log(\"Onwer Address: \", owner_addr)\n    }\n\n\n  }\n  constructor(props){\n    super(props)\n      this.state={\n        account:'0x00001',\n        storage_contract:{}\n      }\n    \n  }\n  \n  render(){\n    return(\n      <div>\n        <h1>TEST DAPP Account: {this.state.account}</h1>\n      </div>\n    )\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}